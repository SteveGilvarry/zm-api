//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use super::sea_orm_active_enums::Orientation;
use super::sea_orm_active_enums::Scheme;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "Events")]
pub struct Model {
    #[sea_orm(column_name = "Id", primary_key)]
    pub id: u64,
    #[sea_orm(column_name = "MonitorId")]
    pub monitor_id: u32,
    #[sea_orm(column_name = "StorageId")]
    pub storage_id: u16,
    #[sea_orm(column_name = "SecondaryStorageId")]
    pub secondary_storage_id: Option<u16>,
    #[sea_orm(column_name = "Name")]
    pub name: String,
    #[sea_orm(column_name = "Cause", column_type = "Text", nullable)]
    pub cause: Option<String>,
    #[sea_orm(column_name = "StartDateTime")]
    pub start_date_time: Option<DateTime>,
    #[sea_orm(column_name = "EndDateTime")]
    pub end_date_time: Option<DateTime>,
    #[sea_orm(column_name = "Width")]
    pub width: u16,
    #[sea_orm(column_name = "Height")]
    pub height: u16,
    #[sea_orm(column_name = "Length", column_type = "Decimal(Some((10, 2)))")]
    pub length: Decimal,
    #[sea_orm(column_name = "Frames")]
    pub frames: Option<u32>,
    #[sea_orm(column_name = "AlarmFrames")]
    pub alarm_frames: Option<u32>,
    #[sea_orm(column_name = "DefaultVideo")]
    pub default_video: String,
    #[sea_orm(column_name = "SaveJPEGs")]
    pub save_jpe_gs: Option<i8>,
    #[sea_orm(column_name = "TotScore")]
    pub tot_score: u32,
    #[sea_orm(column_name = "AvgScore")]
    pub avg_score: Option<u16>,
    #[sea_orm(column_name = "MaxScore")]
    pub max_score: Option<u16>,
    #[sea_orm(column_name = "Archived")]
    pub archived: u8,
    #[sea_orm(column_name = "Videoed")]
    pub videoed: u8,
    #[sea_orm(column_name = "Uploaded")]
    pub uploaded: u8,
    #[sea_orm(column_name = "Emailed")]
    pub emailed: u8,
    #[sea_orm(column_name = "Messaged")]
    pub messaged: u8,
    #[sea_orm(column_name = "Executed")]
    pub executed: u8,
    #[sea_orm(column_name = "Notes", column_type = "Text", nullable)]
    pub notes: Option<String>,
    #[sea_orm(column_name = "StateId")]
    pub state_id: u32,
    #[sea_orm(column_name = "Orientation")]
    pub orientation: Orientation,
    #[sea_orm(column_name = "DiskSpace")]
    pub disk_space: Option<u64>,
    #[sea_orm(column_name = "Scheme")]
    pub scheme: Scheme,
    #[sea_orm(column_name = "Locked")]
    pub locked: i8,
    #[sea_orm(
        column_name = "Latitude",
        column_type = "Decimal(Some((10, 8)))",
        nullable
    )]
    pub latitude: Option<Decimal>,
    #[sea_orm(
        column_name = "Longitude",
        column_type = "Decimal(Some((11, 8)))",
        nullable
    )]
    pub longitude: Option<Decimal>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::events_tags::Entity")]
    EventsTags,
}

impl Related<super::events_tags::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EventsTags.def()
    }
}

impl Related<super::tags::Entity> for Entity {
    fn to() -> RelationDef {
        super::events_tags::Relation::Tags.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::events_tags::Relation::Events.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}

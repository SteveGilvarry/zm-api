//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use super::sea_orm_active_enums::MonitorType;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "MonitorPresets")]
pub struct Model {
    #[sea_orm(column_name = "Id", primary_key)]
    pub id: u32,
    #[sea_orm(column_name = "ModelId")]
    pub model_id: Option<u32>,
    #[sea_orm(column_name = "Name")]
    pub name: String,
    #[sea_orm(column_name = "Type")]
    pub r#type: MonitorType,
    #[sea_orm(column_name = "Device", column_type = "custom(\"TINYTEXT\")", nullable)]
    pub device: Option<String>,
    #[sea_orm(
        column_name = "Channel",
        column_type = "custom(\"TINYTEXT\")",
        nullable
    )]
    pub channel: Option<String>,
    #[sea_orm(column_name = "Format")]
    pub format: Option<u32>,
    #[sea_orm(column_name = "Protocol")]
    pub protocol: Option<String>,
    #[sea_orm(column_name = "Method")]
    pub method: Option<String>,
    #[sea_orm(column_name = "Host")]
    pub host: Option<String>,
    #[sea_orm(column_name = "Port")]
    pub port: Option<String>,
    #[sea_orm(column_name = "Path")]
    pub path: Option<String>,
    #[sea_orm(column_name = "SubPath")]
    pub sub_path: Option<String>,
    #[sea_orm(column_name = "Width")]
    pub width: Option<u16>,
    #[sea_orm(column_name = "Height")]
    pub height: Option<u16>,
    #[sea_orm(column_name = "Palette")]
    pub palette: Option<u32>,
    #[sea_orm(
        column_name = "MaxFPS",
        column_type = "Decimal(Some((5, 2)))",
        nullable
    )]
    pub max_fps: Option<Decimal>,
    #[sea_orm(column_name = "Controllable")]
    pub controllable: u8,
    #[sea_orm(column_name = "ControlId")]
    pub control_id: Option<String>,
    #[sea_orm(column_name = "ControlDevice")]
    pub control_device: Option<String>,
    #[sea_orm(column_name = "ControlAddress")]
    pub control_address: Option<String>,
    #[sea_orm(column_name = "DefaultRate")]
    pub default_rate: u16,
    #[sea_orm(column_name = "DefaultScale")]
    pub default_scale: u16,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::models::Entity",
        from = "Column::ModelId",
        to = "super::models::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Models,
}

impl Related<super::models::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Models.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

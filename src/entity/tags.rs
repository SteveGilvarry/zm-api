//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "Tags")]
pub struct Model {
    #[sea_orm(column_name = "Id", primary_key)]
    pub id: u64,
    #[sea_orm(column_name = "Name", unique)]
    pub name: String,
    #[sea_orm(column_name = "CreateDate")]
    pub create_date: Option<DateTimeUtc>,
    #[sea_orm(column_name = "CreatedBy")]
    pub created_by: Option<u32>,
    #[sea_orm(column_name = "LastAssignedDate")]
    pub last_assigned_date: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::events_tags::Entity")]
    EventsTags,
}

impl Related<super::events_tags::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EventsTags.def()
    }
}

impl Related<super::events::Entity> for Entity {
    fn to() -> RelationDef {
        super::events_tags::Relation::Events.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::events_tags::Relation::Tags.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}

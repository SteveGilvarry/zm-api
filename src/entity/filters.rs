//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use super::sea_orm_active_enums::EmailFormat;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "Filters")]
pub struct Model {
    #[sea_orm(column_name = "Id", primary_key)]
    pub id: u32,
    #[sea_orm(column_name = "Name")]
    pub name: String,
    #[sea_orm(column_name = "UserId")]
    pub user_id: Option<u32>,
    #[sea_orm(column_name = "ExecuteInterval")]
    pub execute_interval: u32,
    #[sea_orm(column_name = "Query_json", column_type = "Text")]
    pub query_json: String,
    #[sea_orm(column_name = "AutoArchive")]
    pub auto_archive: u8,
    #[sea_orm(column_name = "AutoUnarchive")]
    pub auto_unarchive: u8,
    #[sea_orm(column_name = "AutoVideo")]
    pub auto_video: u8,
    #[sea_orm(column_name = "AutoUpload")]
    pub auto_upload: u8,
    #[sea_orm(column_name = "AutoEmail")]
    pub auto_email: u8,
    #[sea_orm(column_name = "EmailTo", column_type = "Text", nullable)]
    pub email_to: Option<String>,
    #[sea_orm(column_name = "EmailSubject", column_type = "Text", nullable)]
    pub email_subject: Option<String>,
    #[sea_orm(column_name = "EmailBody", column_type = "Text", nullable)]
    pub email_body: Option<String>,
    #[sea_orm(column_name = "EmailFormat")]
    pub email_format: EmailFormat,
    #[sea_orm(column_name = "AutoMessage")]
    pub auto_message: u8,
    #[sea_orm(column_name = "AutoExecute")]
    pub auto_execute: u8,
    #[sea_orm(
        column_name = "AutoExecuteCmd",
        column_type = "custom(\"TINYTEXT\")",
        nullable
    )]
    pub auto_execute_cmd: Option<String>,
    #[sea_orm(column_name = "AutoDelete")]
    pub auto_delete: u8,
    #[sea_orm(column_name = "AutoMove")]
    pub auto_move: u8,
    #[sea_orm(column_name = "AutoCopy")]
    pub auto_copy: u8,
    #[sea_orm(column_name = "AutoCopyTo")]
    pub auto_copy_to: u16,
    #[sea_orm(column_name = "AutoMoveTo")]
    pub auto_move_to: u16,
    #[sea_orm(column_name = "UpdateDiskSpace")]
    pub update_disk_space: u8,
    #[sea_orm(column_name = "Background")]
    pub background: u8,
    #[sea_orm(column_name = "Concurrent")]
    pub concurrent: u8,
    #[sea_orm(column_name = "LockRows")]
    pub lock_rows: u8,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}

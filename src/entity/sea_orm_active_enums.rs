//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use sea_orm::entity::prelude::*;
use utoipa::ToSchema;

#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, serde::Serialize, serde::Deserialize, ToSchema)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "Analysing")]
pub enum Analysing {
    #[sea_orm(string_value = "None")]
    None,
    #[sea_orm(string_value = "Always")]
    Always,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, serde::Serialize, serde::Deserialize, ToSchema)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "AnalysisImage")]
pub enum AnalysisImage {
    #[sea_orm(string_value = "FullColour")]
    FullColour,
    #[sea_orm(string_value = "YChannel")]
    YChannel,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, serde::Serialize, serde::Deserialize, ToSchema)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "AnalysisSource")]
pub enum AnalysisSource {
    #[sea_orm(string_value = "Primary")]
    Primary,
    #[sea_orm(string_value = "Secondary")]
    Secondary,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, serde::Serialize, serde::Deserialize, ToSchema)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "Capturing")]
pub enum Capturing {
    #[sea_orm(string_value = "None")]
    None,
    #[sea_orm(string_value = "Ondemand")]
    Ondemand,
    #[sea_orm(string_value = "Always")]
    Always,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, serde::Serialize, serde::Deserialize)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "CheckMethod")]
pub enum CheckMethod {
    #[sea_orm(string_value = "AlarmedPixels")]
    AlarmedPixels,
    #[sea_orm(string_value = "FilteredPixels")]
    FilteredPixels,
    #[sea_orm(string_value = "Blobs")]
    Blobs,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, serde::Serialize, serde::Deserialize)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "Control")]
pub enum Control {
    #[sea_orm(string_value = "None")]
    None,
    #[sea_orm(string_value = "View")]
    View,
    #[sea_orm(string_value = "Edit")]
    Edit,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, serde::Serialize, serde::Deserialize, ToSchema)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "Decoding")]
pub enum Decoding {
    #[sea_orm(string_value = "None")]
    None,
    #[sea_orm(string_value = "Ondemand")]
    Ondemand,
    #[sea_orm(string_value = "KeyFrames")]
    KeyFrames,
    #[sea_orm(string_value = "KeyFrames+Ondemand")]
    KeyFramesOndemand,
    #[sea_orm(string_value = "Always")]
    Always,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, serde::Serialize, serde::Deserialize, ToSchema)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "DefaultCodec")]
pub enum DefaultCodec {
    #[sea_orm(string_value = "auto")]
    Auto,
    #[sea_orm(string_value = "MP4")]
    Mp4,
    #[sea_orm(string_value = "MJPEG")]
    Mjpeg,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, serde::Serialize, serde::Deserialize)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "Devices")]
pub enum Devices {
    #[sea_orm(string_value = "None")]
    None,
    #[sea_orm(string_value = "View")]
    View,
    #[sea_orm(string_value = "Edit")]
    Edit,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, serde::Serialize, serde::Deserialize)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "EmailFormat")]
pub enum EmailFormat {
    #[sea_orm(string_value = "Individual")]
    Individual,
    #[sea_orm(string_value = "Summary")]
    Summary,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, serde::Serialize, serde::Deserialize, ToSchema)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "EventCloseMode")]
pub enum EventCloseMode {
    #[sea_orm(string_value = "system")]
    System,
    #[sea_orm(string_value = "time")]
    Time,
    #[sea_orm(string_value = "duration")]
    Duration,
    #[sea_orm(string_value = "idle")]
    Idle,
    #[sea_orm(string_value = "alarm")]
    Alarm,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, serde::Serialize, serde::Deserialize)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "Events")]
pub enum Events {
    #[sea_orm(string_value = "None")]
    None,
    #[sea_orm(string_value = "View")]
    View,
    #[sea_orm(string_value = "Edit")]
    Edit,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, serde::Serialize, serde::Deserialize, ToSchema)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "Function")]
pub enum Function {
    #[sea_orm(string_value = "None")]
    None,
    #[sea_orm(string_value = "Monitor")]
    Monitor,
    #[sea_orm(string_value = "Modect")]
    Modect,
    #[sea_orm(string_value = "Record")]
    Record,
    #[sea_orm(string_value = "Mocord")]
    Mocord,
    #[sea_orm(string_value = "Nodect")]
    Nodect,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, serde::Serialize, serde::Deserialize)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "Groups")]
pub enum Groups {
    #[sea_orm(string_value = "None")]
    None,
    #[sea_orm(string_value = "View")]
    View,
    #[sea_orm(string_value = "Edit")]
    Edit,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, serde::Serialize, serde::Deserialize, ToSchema)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "Importance")]
pub enum Importance {
    #[sea_orm(string_value = "Normal")]
    Normal,
    #[sea_orm(string_value = "Less")]
    Less,
    #[sea_orm(string_value = "Not")]
    Not,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, serde::Serialize, serde::Deserialize)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "Monitors")]
pub enum Monitors {
    #[sea_orm(string_value = "None")]
    None,
    #[sea_orm(string_value = "View")]
    View,
    #[sea_orm(string_value = "Edit")]
    Edit,
    #[sea_orm(string_value = "Create")]
    Create,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, serde::Serialize, serde::Deserialize, ToSchema)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "Orientation")]
pub enum Orientation {
    #[sea_orm(string_value = "ROTATE_0")]
    Rotate0,
    #[sea_orm(string_value = "ROTATE_90")]
    Rotate90,
    #[sea_orm(string_value = "ROTATE_180")]
    Rotate180,
    #[sea_orm(string_value = "ROTATE_270")]
    Rotate270,
    #[sea_orm(string_value = "FLIP_HORI")]
    FlipHori,
    #[sea_orm(string_value = "FLIP_VERT")]
    FlipVert,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, serde::Serialize, serde::Deserialize, ToSchema)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "OutputContainer")]
pub enum OutputContainer {
    #[sea_orm(string_value = "auto")]
    Auto,
    #[sea_orm(string_value = "mp4")]
    Mp4,
    #[sea_orm(string_value = "mkv")]
    Mkv,
    #[sea_orm(string_value = "webm")]
    Webm,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, serde::Serialize, serde::Deserialize)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "Permission")]
pub enum Permission {
    #[sea_orm(string_value = "Inherit")]
    Inherit,
    #[sea_orm(string_value = "None")]
    None,
    #[sea_orm(string_value = "View")]
    View,
    #[sea_orm(string_value = "Edit")]
    Edit,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, serde::Serialize, serde::Deserialize, ToSchema)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "RTSP2WebType")]
pub enum Rtsp2WebType {
    #[sea_orm(string_value = "HLS")]
    Hls,
    #[sea_orm(string_value = "MSE")]
    Mse,
    #[sea_orm(string_value = "WebRTC")]
    WebRtc,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, serde::Serialize, serde::Deserialize, ToSchema)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "Recording")]
pub enum Recording {
    #[sea_orm(string_value = "None")]
    None,
    #[sea_orm(string_value = "OnMotion")]
    OnMotion,
    #[sea_orm(string_value = "Always")]
    Always,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, serde::Serialize, serde::Deserialize, ToSchema)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "RecordingSource")]
pub enum RecordingSource {
    #[sea_orm(string_value = "Primary")]
    Primary,
    #[sea_orm(string_value = "Secondary")]
    Secondary,
    #[sea_orm(string_value = "Both")]
    Both,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, serde::Serialize, serde::Deserialize)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "Scheme")]
pub enum Scheme {
    #[sea_orm(string_value = "Deep")]
    Deep,
    #[sea_orm(string_value = "Medium")]
    Medium,
    #[sea_orm(string_value = "Shallow")]
    Shallow,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, serde::Serialize, serde::Deserialize)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "Snapshots")]
pub enum Snapshots {
    #[sea_orm(string_value = "None")]
    None,
    #[sea_orm(string_value = "View")]
    View,
    #[sea_orm(string_value = "Edit")]
    Edit,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, serde::Serialize, serde::Deserialize)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "Status")]
pub enum Status {
    #[sea_orm(string_value = "Unknown")]
    Unknown,
    #[sea_orm(string_value = "NotRunning")]
    NotRunning,
    #[sea_orm(string_value = "Running")]
    Running,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, serde::Serialize, serde::Deserialize)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "Stream")]
pub enum Stream {
    #[sea_orm(string_value = "None")]
    None,
    #[sea_orm(string_value = "View")]
    View,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, serde::Serialize, serde::Deserialize)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "System")]
pub enum System {
    #[sea_orm(string_value = "None")]
    None,
    #[sea_orm(string_value = "View")]
    View,
    #[sea_orm(string_value = "Edit")]
    Edit,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, serde::Serialize, serde::Deserialize)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "ZoneType")]
pub enum ZoneType {
    #[sea_orm(string_value = "Active")]
    Active,
    #[sea_orm(string_value = "Inclusive")]
    Inclusive,
    #[sea_orm(string_value = "Exclusive")]
    Exclusive,
    #[sea_orm(string_value = "Preclusive")]
    Preclusive,
    #[sea_orm(string_value = "Inactive")]
    Inactive,
    #[sea_orm(string_value = "Privacy")]
    Privacy,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, serde::Serialize, serde::Deserialize, ToSchema)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "MonitorType")]
pub enum MonitorType {
    #[sea_orm(string_value = "Local")]
    Local,
    #[sea_orm(string_value = "Remote")]
    Remote,
    #[sea_orm(string_value = "File")]
    File,
    #[sea_orm(string_value = "Ffmpeg")]
    Ffmpeg,
    #[sea_orm(string_value = "Libvlc")]
    Libvlc,
    #[sea_orm(string_value = "cURL")]
    Curl,
    #[sea_orm(string_value = "WebSite")]
    WebSite,
    #[sea_orm(string_value = "VNC")]
    Vnc,
}

#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, serde::Serialize, serde::Deserialize)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "DeviceType")]
pub enum DeviceType {
    #[sea_orm(string_value = "X10")]
    X10,
}

#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, serde::Serialize, serde::Deserialize)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "Units")]
pub enum Units {
    #[sea_orm(string_value = "Pixels")]
    Pixels,
    #[sea_orm(string_value = "Percent")]
    Percent,
}

#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, serde::Serialize, serde::Deserialize)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "FrameType")]
pub enum FrameType {
    #[sea_orm(string_value = "Normal")]
    Normal,
    #[sea_orm(string_value = "Bulk")]
    Bulk,
    #[sea_orm(string_value = "Alarm")]
    Alarm,
}

#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, serde::Serialize, serde::Deserialize)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "StorageType")]
pub enum StorageType {
    #[sea_orm(string_value = "local")]
    Local,
    #[sea_orm(string_value = "s3fs")]
    S3fs,
}
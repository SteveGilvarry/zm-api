//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use super::sea_orm_active_enums::Control;
use super::sea_orm_active_enums::Devices;
use super::sea_orm_active_enums::Events;
use super::sea_orm_active_enums::Groups;
use super::sea_orm_active_enums::Monitors;
use super::sea_orm_active_enums::Snapshots;
use super::sea_orm_active_enums::Stream;
use super::sea_orm_active_enums::System;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "Users")]
pub struct Model {
    #[sea_orm(column_name = "Id", primary_key)]
    pub id: u32,
    #[sea_orm(column_name = "Username", unique)]
    pub username: String,
    #[sea_orm(column_name = "Password")]
    pub password: String,
    #[sea_orm(column_name = "Name")]
    pub name: String,
    #[sea_orm(column_name = "Email")]
    pub email: String,
    #[sea_orm(column_name = "Phone")]
    pub phone: String,
    #[sea_orm(column_name = "Language")]
    pub language: Option<String>,
    #[sea_orm(column_name = "Enabled")]
    pub enabled: u8,
    #[sea_orm(column_name = "Stream")]
    pub stream: Stream,
    #[sea_orm(column_name = "Events")]
    pub events: Events,
    #[sea_orm(column_name = "Control")]
    pub control: Control,
    #[sea_orm(column_name = "Monitors")]
    pub monitors: Monitors,
    #[sea_orm(column_name = "Groups")]
    pub groups: Groups,
    #[sea_orm(column_name = "Devices")]
    pub devices: Devices,
    #[sea_orm(column_name = "Snapshots")]
    pub snapshots: Snapshots,
    #[sea_orm(column_name = "System")]
    pub system: System,
    #[sea_orm(column_name = "MaxBandwidth")]
    pub max_bandwidth: Option<String>,
    #[sea_orm(column_name = "MonitorIds", column_type = "Text", nullable)]
    pub monitor_ids: Option<String>,
    #[sea_orm(column_name = "TokenMinExpiry")]
    pub token_min_expiry: u64,
    #[sea_orm(column_name = "APIEnabled")]
    pub api_enabled: u8,
    #[sea_orm(column_name = "HomeView")]
    pub home_view: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::groups_permissions::Entity")]
    GroupsPermissions,
    #[sea_orm(has_many = "super::monitors_permissions::Entity")]
    MonitorsPermissions,
    #[sea_orm(has_many = "super::user_preferences::Entity")]
    UserPreferences,
}

impl Related<super::groups_permissions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GroupsPermissions.def()
    }
}

impl Related<super::monitors_permissions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MonitorsPermissions.def()
    }
}

impl Related<super::user_preferences::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserPreferences.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use super::sea_orm_active_enums::Analysing;
use super::sea_orm_active_enums::AnalysisImage;
use super::sea_orm_active_enums::AnalysisSource;
use super::sea_orm_active_enums::Capturing;
use super::sea_orm_active_enums::Decoding;
use super::sea_orm_active_enums::DefaultCodec;
use super::sea_orm_active_enums::EventCloseMode;
use super::sea_orm_active_enums::Function;
use super::sea_orm_active_enums::Importance;
use super::sea_orm_active_enums::Orientation;
use super::sea_orm_active_enums::OutputContainer;
use super::sea_orm_active_enums::Recording;
use super::sea_orm_active_enums::RecordingSource;
use super::sea_orm_active_enums::Rtsp2WebType;
use super::sea_orm_active_enums::MonitorType;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "Monitors")]
pub struct Model {
    #[sea_orm(column_name = "Id", primary_key)]
    pub id: u32,
    #[sea_orm(column_name = "Name")]
    pub name: String,
    #[sea_orm(column_name = "Deleted")]
    pub deleted: bool,
    #[sea_orm(column_name = "Notes", column_type = "Text", nullable)]
    pub notes: Option<String>,
    #[sea_orm(column_name = "ServerId")]
    pub server_id: Option<u32>,
    #[sea_orm(column_name = "StorageId")]
    pub storage_id: u16,
    #[sea_orm(column_name = "ManufacturerId")]
    pub manufacturer_id: Option<u32>,
    #[sea_orm(column_name = "ModelId")]
    pub model_id: Option<u32>,
    #[sea_orm(column_name = "Type")]
    pub r#type: MonitorType,
    #[sea_orm(column_name = "Function")]
    pub function: Function,
    #[sea_orm(column_name = "Capturing")]
    pub capturing: Capturing,
    #[sea_orm(column_name = "Enabled")]
    pub enabled: u8,
    #[sea_orm(column_name = "DecodingEnabled")]
    pub decoding_enabled: u8,
    #[sea_orm(column_name = "Decoding")]
    pub decoding: Decoding,
    #[sea_orm(column_name = "RTSP2WebEnabled")]
    pub rtsp2_web_enabled: i8,
    #[sea_orm(column_name = "RTSP2WebType")]
    pub rtsp2_web_type: Rtsp2WebType,
    #[sea_orm(column_name = "JanusEnabled")]
    pub janus_enabled: i8,
    #[sea_orm(column_name = "JanusAudioEnabled")]
    pub janus_audio_enabled: i8,
    #[sea_orm(column_name = "Janus_Profile_Override")]
    pub janus_profile_override: Option<String>,
    #[sea_orm(column_name = "Janus_Use_RTSP_Restream")]
    pub janus_use_rtsp_restream: i8,
    #[sea_orm(column_name = "Janus_RTSP_User")]
    pub janus_rtsp_user: Option<i32>,
    #[sea_orm(column_name = "Janus_RTSP_Session_Timeout")]
    pub janus_rtsp_session_timeout: Option<i32>,
    #[sea_orm(column_name = "LinkedMonitors")]
    pub linked_monitors: Option<String>,
    #[sea_orm(column_name = "Triggers", column_type = "custom(\"SET ('X10')\")")]
    pub triggers: String,
    #[sea_orm(column_name = "EventStartCommand")]
    pub event_start_command: String,
    #[sea_orm(column_name = "EventEndCommand")]
    pub event_end_command: String,
    #[sea_orm(column_name = "ONVIF_URL")]
    pub onvif_url: String,
    #[sea_orm(column_name = "ONVIF_Events_Path")]
    pub onvif_events_path: String,
    #[sea_orm(column_name = "ONVIF_Username")]
    pub onvif_username: String,
    #[sea_orm(column_name = "ONVIF_Password")]
    pub onvif_password: String,
    #[sea_orm(column_name = "ONVIF_Options")]
    pub onvif_options: String,
    #[sea_orm(column_name = "ONVIF_Event_Listener")]
    pub onvif_event_listener: i8,
    #[sea_orm(column_name = "ONVIF_Alarm_Text")]
    pub onvif_alarm_text: Option<String>,
    #[sea_orm(column_name = "use_Amcrest_API")]
    pub use_amcrest_api: i8,
    #[sea_orm(column_name = "Device", column_type = "custom(\"TINYTEXT\")")]
    pub device: String,
    #[sea_orm(column_name = "Channel")]
    pub channel: u8,
    #[sea_orm(column_name = "Format")]
    pub format: u32,
    #[sea_orm(column_name = "V4LMultiBuffer")]
    pub v4l_multi_buffer: Option<u8>,
    #[sea_orm(column_name = "V4LCapturesPerFrame")]
    pub v4l_captures_per_frame: Option<u8>,
    #[sea_orm(column_name = "Protocol")]
    pub protocol: Option<String>,
    #[sea_orm(column_name = "Method")]
    pub method: Option<String>,
    #[sea_orm(column_name = "Host")]
    pub host: Option<String>,
    #[sea_orm(column_name = "Port")]
    pub port: String,
    #[sea_orm(column_name = "SubPath")]
    pub sub_path: String,
    #[sea_orm(column_name = "Path")]
    pub path: Option<String>,
    #[sea_orm(column_name = "SecondPath")]
    pub second_path: Option<String>,
    #[sea_orm(column_name = "Options")]
    pub options: Option<String>,
    #[sea_orm(column_name = "User")]
    pub user: Option<String>,
    #[sea_orm(column_name = "Pass")]
    pub pass: Option<String>,
    #[sea_orm(column_name = "Width")]
    pub width: u16,
    #[sea_orm(column_name = "Height")]
    pub height: u16,
    #[sea_orm(column_name = "Colours")]
    pub colours: u8,
    #[sea_orm(column_name = "Palette")]
    pub palette: u32,
    #[sea_orm(column_name = "Orientation")]
    pub orientation: Orientation,
    #[sea_orm(column_name = "Deinterlacing")]
    pub deinterlacing: u32,
    #[sea_orm(column_name = "Decoder")]
    pub decoder: Option<String>,
    #[sea_orm(column_name = "DecoderHWAccelName")]
    pub decoder_hw_accel_name: Option<String>,
    #[sea_orm(column_name = "DecoderHWAccelDevice")]
    pub decoder_hw_accel_device: Option<String>,
    #[sea_orm(column_name = "SaveJPEGs")]
    pub save_jpe_gs: i8,
    #[sea_orm(column_name = "VideoWriter")]
    pub video_writer: i8,
    #[sea_orm(column_name = "OutputCodec")]
    pub output_codec: Option<u32>,
    #[sea_orm(column_name = "Encoder")]
    pub encoder: Option<String>,
    #[sea_orm(column_name = "OutputContainer")]
    pub output_container: Option<OutputContainer>,
    #[sea_orm(column_name = "EncoderParameters", column_type = "Text", nullable)]
    pub encoder_parameters: Option<String>,
    #[sea_orm(column_name = "RecordAudio")]
    pub record_audio: i8,
    #[sea_orm(column_name = "RecordingSource")]
    pub recording_source: RecordingSource,
    #[sea_orm(column_name = "RTSPDescribe")]
    pub rtsp_describe: Option<u8>,
    #[sea_orm(column_name = "Brightness", column_type = "custom(\"MEDIUMINT\")", nullable)]
    pub brightness: Option<i32>,
    #[sea_orm(column_name = "Contrast", column_type = "custom(\"MEDIUMINT\")", nullable)]
    pub contrast: Option<i32>,
    #[sea_orm(column_name = "Hue", column_type = "custom(\"MEDIUMINT\")", nullable)]
    pub hue: Option<i32>,
    #[sea_orm(column_name = "Colour", column_type = "custom(\"MEDIUMINT\")", nullable)]
    pub colour: Option<i32>,
    #[sea_orm(column_name = "EventPrefix")]
    pub event_prefix: String,
    #[sea_orm(column_name = "LabelFormat")]
    pub label_format: Option<String>,
    #[sea_orm(column_name = "LabelX")]
    pub label_x: u16,
    #[sea_orm(column_name = "LabelY")]
    pub label_y: u16,
    #[sea_orm(column_name = "LabelSize")]
    pub label_size: u16,
    #[sea_orm(column_name = "ImageBufferCount")]
    pub image_buffer_count: u16,
    #[sea_orm(column_name = "MaxImageBufferCount")]
    pub max_image_buffer_count: u16,
    #[sea_orm(column_name = "WarmupCount")]
    pub warmup_count: u16,
    #[sea_orm(column_name = "PreEventCount")]
    pub pre_event_count: u16,
    #[sea_orm(column_name = "PostEventCount")]
    pub post_event_count: u16,
    #[sea_orm(column_name = "StreamReplayBuffer")]
    pub stream_replay_buffer: u32,
    #[sea_orm(column_name = "AlarmFrameCount")]
    pub alarm_frame_count: u16,
    #[sea_orm(column_name = "SectionLength")]
    pub section_length: u32,
    #[sea_orm(column_name = "SectionLengthWarn")]
    pub section_length_warn: i8,
    #[sea_orm(column_name = "EventCloseMode")]
    pub event_close_mode: EventCloseMode,
    #[sea_orm(column_name = "MinSectionLength")]
    pub min_section_length: u32,
    #[sea_orm(column_name = "FrameSkip")]
    pub frame_skip: u16,
    #[sea_orm(column_name = "MotionFrameSkip")]
    pub motion_frame_skip: u16,
    #[sea_orm(
        column_name = "AnalysisFPSLimit",
        column_type = "Decimal(Some((5, 2)))",
        nullable
    )]
    pub analysis_fps_limit: Option<Decimal>,
    #[sea_orm(column_name = "AnalysisUpdateDelay")]
    pub analysis_update_delay: u16,
    #[sea_orm(
        column_name = "MaxFPS",
        column_type = "Decimal(Some((5, 3)))",
        nullable
    )]
    pub max_fps: Option<Decimal>,
    #[sea_orm(
        column_name = "AlarmMaxFPS",
        column_type = "Decimal(Some((5, 2)))",
        nullable
    )]
    pub alarm_max_fps: Option<Decimal>,
    #[sea_orm(column_name = "FPSReportInterval")]
    pub fps_report_interval: u16,
    #[sea_orm(column_name = "RefBlendPerc")]
    pub ref_blend_perc: u8,
    #[sea_orm(column_name = "AlarmRefBlendPerc")]
    pub alarm_ref_blend_perc: u8,
    #[sea_orm(column_name = "Controllable")]
    pub controllable: u8,
    #[sea_orm(column_name = "ControlId")]
    pub control_id: Option<u32>,
    #[sea_orm(column_name = "ControlDevice")]
    pub control_device: Option<String>,
    #[sea_orm(column_name = "ControlAddress")]
    pub control_address: Option<String>,
    #[sea_orm(
        column_name = "AutoStopTimeout",
        column_type = "Decimal(Some((5, 2)))",
        nullable
    )]
    pub auto_stop_timeout: Option<Decimal>,
    #[sea_orm(column_name = "TrackMotion")]
    pub track_motion: u8,
    #[sea_orm(column_name = "TrackDelay")]
    pub track_delay: Option<u16>,
    #[sea_orm(column_name = "ReturnLocation")]
    pub return_location: i8,
    #[sea_orm(column_name = "ReturnDelay")]
    pub return_delay: Option<u16>,
    #[sea_orm(column_name = "ModectDuringPTZ")]
    pub modect_during_ptz: u8,
    #[sea_orm(column_name = "DefaultRate")]
    pub default_rate: u16,
    #[sea_orm(column_name = "DefaultScale")]
    pub default_scale: u16,
    #[sea_orm(column_name = "DefaultCodec")]
    pub default_codec: DefaultCodec,
    #[sea_orm(column_name = "SignalCheckPoints")]
    pub signal_check_points: u32,
    #[sea_orm(column_name = "SignalCheckColour")]
    pub signal_check_colour: String,
    #[sea_orm(column_name = "WebColour")]
    pub web_colour: String,
    #[sea_orm(column_name = "Exif")]
    pub exif: u8,
    #[sea_orm(column_name = "Sequence")]
    pub sequence: Option<u16>,
    #[sea_orm(column_name = "TotalEvents")]
    pub total_events: Option<i32>,
    #[sea_orm(column_name = "ZoneCount")]
    pub zone_count: i8,
    #[sea_orm(column_name = "TotalEventDiskSpace")]
    pub total_event_disk_space: Option<i64>,
    #[sea_orm(column_name = "Refresh")]
    pub refresh: Option<u32>,
    #[sea_orm(
        column_name = "Latitude",
        column_type = "Decimal(Some((10, 8)))",
        nullable
    )]
    pub latitude: Option<Decimal>,
    #[sea_orm(
        column_name = "Longitude",
        column_type = "Decimal(Some((11, 8)))",
        nullable
    )]
    pub longitude: Option<Decimal>,
    #[sea_orm(column_name = "RTSPServer")]
    pub rtsp_server: i8,
    #[sea_orm(column_name = "RTSPStreamName")]
    pub rtsp_stream_name: String,
    #[sea_orm(column_name = "SOAP_wsa_compl")]
    pub soap_wsa_compl: i8,
    #[sea_orm(column_name = "Importance")]
    pub importance: Importance,
    #[sea_orm(column_name = "MQTT_Enabled")]
    pub mqtt_enabled: i8,
    #[sea_orm(column_name = "MQTT_Subscriptions")]
    pub mqtt_subscriptions: String,
    #[sea_orm(column_name = "StartupDelay")]
    pub startup_delay: i32,
    #[sea_orm(column_name = "Analysing")]
    pub analysing: Analysing,
    #[sea_orm(column_name = "AnalysisSource")]
    pub analysis_source: AnalysisSource,
    #[sea_orm(column_name = "AnalysisImage")]
    pub analysis_image: AnalysisImage,
    #[sea_orm(column_name = "Recording")]
    pub recording: Recording,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::manufacturers::Entity",
        from = "Column::ManufacturerId",
        to = "super::manufacturers::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Manufacturers,
    #[sea_orm(
        belongs_to = "super::models::Entity",
        from = "Column::ModelId",
        to = "super::models::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Models,
    #[sea_orm(has_many = "super::monitors_permissions::Entity")]
    MonitorsPermissions,
}

impl Related<super::manufacturers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Manufacturers.def()
    }
}

impl Related<super::models::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Models.def()
    }
}

impl Related<super::monitors_permissions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MonitorsPermissions.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

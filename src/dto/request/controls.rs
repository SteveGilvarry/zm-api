use serde::{Deserialize, Serialize};
use utoipa::ToSchema;
use crate::entity::sea_orm_active_enums::MonitorType;

#[derive(Debug, Clone, Deserialize, Serialize, ToSchema)]
pub struct CreateControlRequest {
    pub name: String,
    #[serde(rename = "type")]
    pub r#type: MonitorType,
    pub protocol: Option<String>,
    pub can_wake: Option<u8>,
    pub can_sleep: Option<u8>,
    pub can_reset: Option<u8>,
    pub can_reboot: Option<u8>,
    pub can_zoom: Option<u8>,
    pub can_auto_zoom: Option<u8>,
    pub can_zoom_abs: Option<u8>,
    pub can_zoom_rel: Option<u8>,
    pub can_zoom_con: Option<u8>,
    pub min_zoom_range: Option<u32>,
    pub max_zoom_range: Option<u32>,
    pub min_zoom_step: Option<u32>,
    pub max_zoom_step: Option<u32>,
    pub has_zoom_speed: Option<u8>,
    pub min_zoom_speed: Option<u32>,
    pub max_zoom_speed: Option<u32>,
    pub can_focus: Option<u8>,
    pub can_auto_focus: Option<u8>,
    pub can_focus_abs: Option<u8>,
    pub can_focus_rel: Option<u8>,
    pub can_focus_con: Option<u8>,
    pub min_focus_range: Option<u32>,
    pub max_focus_range: Option<u32>,
    pub min_focus_step: Option<u32>,
    pub max_focus_step: Option<u32>,
    pub has_focus_speed: Option<u8>,
    pub min_focus_speed: Option<u32>,
    pub max_focus_speed: Option<u32>,
    pub can_iris: Option<u8>,
    pub can_auto_iris: Option<u8>,
    pub can_iris_abs: Option<u8>,
    pub can_iris_rel: Option<u8>,
    pub can_iris_con: Option<u8>,
    pub min_iris_range: Option<u32>,
    pub max_iris_range: Option<u32>,
    pub min_iris_step: Option<u32>,
    pub max_iris_step: Option<u32>,
    pub has_iris_speed: Option<u8>,
    pub min_iris_speed: Option<u32>,
    pub max_iris_speed: Option<u32>,
    pub can_gain: Option<u8>,
    pub can_auto_gain: Option<u8>,
    pub can_gain_abs: Option<u8>,
    pub can_gain_rel: Option<u8>,
    pub can_gain_con: Option<u8>,
    pub min_gain_range: Option<u32>,
    pub max_gain_range: Option<u32>,
    pub min_gain_step: Option<u32>,
    pub max_gain_step: Option<u32>,
    pub has_gain_speed: Option<u8>,
    pub min_gain_speed: Option<u32>,
    pub max_gain_speed: Option<u32>,
    pub can_white: Option<u8>,
    pub can_auto_white: Option<u8>,
    pub can_white_abs: Option<u8>,
    pub can_white_rel: Option<u8>,
    pub can_white_con: Option<u8>,
    pub min_white_range: Option<u32>,
    pub max_white_range: Option<u32>,
    pub min_white_step: Option<u32>,
    pub max_white_step: Option<u32>,
    pub has_white_speed: Option<u8>,
    pub min_white_speed: Option<u32>,
    pub max_white_speed: Option<u32>,
    pub has_presets: Option<u8>,
    pub num_presets: Option<u8>,
    pub has_home_preset: Option<u8>,
    pub can_set_presets: Option<u8>,
    pub can_move: Option<u8>,
    pub can_move_diag: Option<u8>,
    pub can_move_map: Option<u8>,
    pub can_move_abs: Option<u8>,
    pub can_move_rel: Option<u8>,
    pub can_move_con: Option<u8>,
    pub can_pan: Option<u8>,
    pub min_pan_range: Option<i32>,
    pub max_pan_range: Option<i32>,
    pub min_pan_step: Option<i32>,
    pub max_pan_step: Option<i32>,
    pub has_pan_speed: Option<u8>,
    pub min_pan_speed: Option<i32>,
    pub max_pan_speed: Option<i32>,
    pub has_turbo_pan: Option<u8>,
    pub turbo_pan_speed: Option<i32>,
    pub can_tilt: Option<u8>,
    pub min_tilt_range: Option<i32>,
    pub max_tilt_range: Option<i32>,
    pub min_tilt_step: Option<i32>,
    pub max_tilt_step: Option<i32>,
    pub has_tilt_speed: Option<u8>,
    pub min_tilt_speed: Option<i32>,
    pub max_tilt_speed: Option<i32>,
    pub has_turbo_tilt: Option<u8>,
    pub turbo_tilt_speed: Option<i32>,
    pub can_auto_scan: Option<u8>,
    pub num_scan_paths: Option<u8>,
}

#[derive(Debug, Clone, Deserialize, Serialize, ToSchema)]
pub struct UpdateControlRequest {
    pub name: Option<String>,
    #[serde(rename = "type")]
    pub r#type: Option<MonitorType>,
    pub protocol: Option<String>,
    pub can_wake: Option<u8>,
    pub can_sleep: Option<u8>,
    pub can_reset: Option<u8>,
    pub can_reboot: Option<u8>,
    pub can_zoom: Option<u8>,
    pub can_auto_zoom: Option<u8>,
    pub can_zoom_abs: Option<u8>,
    pub can_zoom_rel: Option<u8>,
    pub can_zoom_con: Option<u8>,
    pub min_zoom_range: Option<u32>,
    pub max_zoom_range: Option<u32>,
    pub min_zoom_step: Option<u32>,
    pub max_zoom_step: Option<u32>,
    pub has_zoom_speed: Option<u8>,
    pub min_zoom_speed: Option<u32>,
    pub max_zoom_speed: Option<u32>,
    pub can_focus: Option<u8>,
    pub can_auto_focus: Option<u8>,
    pub can_focus_abs: Option<u8>,
    pub can_focus_rel: Option<u8>,
    pub can_focus_con: Option<u8>,
    pub min_focus_range: Option<u32>,
    pub max_focus_range: Option<u32>,
    pub min_focus_step: Option<u32>,
    pub max_focus_step: Option<u32>,
    pub has_focus_speed: Option<u8>,
    pub min_focus_speed: Option<u32>,
    pub max_focus_speed: Option<u32>,
    pub can_iris: Option<u8>,
    pub can_auto_iris: Option<u8>,
    pub can_iris_abs: Option<u8>,
    pub can_iris_rel: Option<u8>,
    pub can_iris_con: Option<u8>,
    pub min_iris_range: Option<u32>,
    pub max_iris_range: Option<u32>,
    pub min_iris_step: Option<u32>,
    pub max_iris_step: Option<u32>,
    pub has_iris_speed: Option<u8>,
    pub min_iris_speed: Option<u32>,
    pub max_iris_speed: Option<u32>,
    pub can_gain: Option<u8>,
    pub can_auto_gain: Option<u8>,
    pub can_gain_abs: Option<u8>,
    pub can_gain_rel: Option<u8>,
    pub can_gain_con: Option<u8>,
    pub min_gain_range: Option<u32>,
    pub max_gain_range: Option<u32>,
    pub min_gain_step: Option<u32>,
    pub max_gain_step: Option<u32>,
    pub has_gain_speed: Option<u8>,
    pub min_gain_speed: Option<u32>,
    pub max_gain_speed: Option<u32>,
    pub can_white: Option<u8>,
    pub can_auto_white: Option<u8>,
    pub can_white_abs: Option<u8>,
    pub can_white_rel: Option<u8>,
    pub can_white_con: Option<u8>,
    pub min_white_range: Option<u32>,
    pub max_white_range: Option<u32>,
    pub min_white_step: Option<u32>,
    pub max_white_step: Option<u32>,
    pub has_white_speed: Option<u8>,
    pub min_white_speed: Option<u32>,
    pub max_white_speed: Option<u32>,
    pub has_presets: Option<u8>,
    pub num_presets: Option<u8>,
    pub has_home_preset: Option<u8>,
    pub can_set_presets: Option<u8>,
    pub can_move: Option<u8>,
    pub can_move_diag: Option<u8>,
    pub can_move_map: Option<u8>,
    pub can_move_abs: Option<u8>,
    pub can_move_rel: Option<u8>,
    pub can_move_con: Option<u8>,
    pub can_pan: Option<u8>,
    pub min_pan_range: Option<i32>,
    pub max_pan_range: Option<i32>,
    pub min_pan_step: Option<i32>,
    pub max_pan_step: Option<i32>,
    pub has_pan_speed: Option<u8>,
    pub min_pan_speed: Option<i32>,
    pub max_pan_speed: Option<i32>,
    pub has_turbo_pan: Option<u8>,
    pub turbo_pan_speed: Option<i32>,
    pub can_tilt: Option<u8>,
    pub min_tilt_range: Option<i32>,
    pub max_tilt_range: Option<i32>,
    pub min_tilt_step: Option<i32>,
    pub max_tilt_step: Option<i32>,
    pub has_tilt_speed: Option<u8>,
    pub min_tilt_speed: Option<i32>,
    pub max_tilt_speed: Option<i32>,
    pub has_turbo_tilt: Option<u8>,
    pub turbo_tilt_speed: Option<i32>,
    pub can_auto_scan: Option<u8>,
    pub num_scan_paths: Option<u8>,
}

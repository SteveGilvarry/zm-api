use fake::Dummy;
use serde::{Deserialize, Serialize};
use utoipa::ToSchema;
use crate::entity::monitors;
use rust_decimal::prelude::*;

#[derive(Debug, Serialize, Deserialize, ToSchema, Dummy)]
pub struct MonitorResponse {
    pub id: u32,
    pub name: String,
    pub deleted: i8,
    pub notes: Option<String>,
    pub server_id: Option<u32>,
    pub storage_id: u16,
    pub manufacturer_id: Option<u32>,
    pub model_id: Option<u32>,
    pub r#type: String,
    pub function: String,
    pub capturing: String,
    pub enabled: u8,
    pub decoding_enabled: u8,
    pub decoding: String,
    pub rtsp2_web_enabled: i8,
    pub rtsp2_web_type: String,
    pub janus_enabled: i8,
    pub janus_audio_enabled: i8,
    pub janus_profile_override: Option<String>,
    pub janus_use_rtsp_restream: i8,
    pub janus_rtsp_user: Option<i32>,
    pub janus_rtsp_session_timeout: Option<i32>,
    pub linked_monitors: Option<String>,
    pub triggers: String,
    pub event_start_command: String,
    pub event_end_command: String,
    pub onvif_url: String,
    pub onvif_events_path: String,
    pub onvif_username: String,
    pub onvif_password: String,
    pub onvif_options: String,
    pub onvif_event_listener: i8,
    pub onvif_alarm_text: Option<String>,
    pub use_amcrest_api: i8,
    pub device: String,
    pub channel: u8,
    pub format: u32,
    pub v4l_multi_buffer: Option<u8>,
    pub v4l_captures_per_frame: Option<u8>,
    pub protocol: Option<String>,
    pub method: Option<String>,
    pub host: Option<String>,
    pub port: String,
    pub sub_path: String,
    pub path: Option<String>,
    pub second_path: Option<String>,
    pub options: Option<String>,
    pub user: Option<String>,
    pub pass: Option<String>,
    pub width: u16,
    pub height: u16,
    pub colours: u8,
    pub palette: u32,
    pub orientation: String,
    pub deinterlacing: u32,
    pub decoder: Option<String>,
    pub decoder_hw_accel_name: Option<String>,
    pub decoder_hw_accel_device: Option<String>,
    pub save_jpe_gs: i8,
    pub video_writer: i8,
    pub output_codec: Option<u32>,
    pub encoder: Option<String>,
    pub output_container: Option<String>,
    pub encoder_parameters: Option<String>,
    pub record_audio: i8,
    pub recording_source: String,
    pub rtsp_describe: Option<u8>,
    pub brightness: Option<i32>,
    pub contrast: Option<i32>,
    pub hue: Option<i32>,
    pub colour: Option<i32>,
    pub event_prefix: String,
    pub label_format: Option<String>,
    pub label_x: u16,
    pub label_y: u16,
    pub label_size: u16,
    pub image_buffer_count: u16,
    pub max_image_buffer_count: u16,
    pub warmup_count: u16,
    pub pre_event_count: u16,
    pub post_event_count: u16,
    pub stream_replay_buffer: u32,
    pub alarm_frame_count: u16,
    pub section_length: u32,
    pub section_length_warn: i8,
    pub event_close_mode: String,
    pub min_section_length: u32,
    pub frame_skip: u16,
    pub motion_frame_skip: u16,
    pub analysis_fps_limit: Option<f64>,
    pub analysis_update_delay: u16,
    pub max_fps: Option<f64>,
    pub alarm_max_fps: Option<f64>,
    pub fps_report_interval: u16,
    pub ref_blend_perc: u8,
    pub alarm_ref_blend_perc: u8,
    pub controllable: u8,
    pub control_id: Option<u32>,
    pub control_device: Option<String>,
    pub control_address: Option<String>,
    pub auto_stop_timeout: Option<f64>,
    pub track_motion: u8,
    pub track_delay: Option<u16>,
    pub return_location: i8,
    pub return_delay: Option<u16>,
    pub modect_during_ptz: u8,
    pub default_rate: u16,
    pub default_scale: u16,
    pub default_codec: String,
    pub signal_check_points: u32,
    pub signal_check_colour: String,
    pub web_colour: String,
    pub exif: u8,
    pub sequence: Option<u16>,
    pub total_events: Option<i32>,
    pub zone_count: i8,
    pub total_event_disk_space: Option<i64>,
    pub refresh: Option<u32>,
    pub latitude: Option<f64>,
    pub longitude: Option<f64>,
    pub rtsp_server: i8,
    pub rtsp_stream_name: String,
    pub soap_wsa_compl: i8,
    pub importance: String,
    pub mqtt_enabled: i8,
    pub mqtt_subscriptions: String,
    pub startup_delay: i32,
    pub analysing: String,
    pub analysis_source: String,
    pub analysis_image: String,
    pub recording: String,
}

impl From<monitors::Model> for MonitorResponse {
    fn from(model: monitors::Model) -> Self {
        Self {
            id: model.id,
            name: model.name,
            deleted: if model.deleted { 1 } else { 0 },
            notes: model.notes,
            server_id: model.server_id,
            storage_id: model.storage_id,
            manufacturer_id: model.manufacturer_id,
            model_id: model.model_id,
            r#type: model.r#type.to_string(),
            function: model.function.to_string(),
            capturing: model.capturing.to_string(),
            enabled: model.enabled,
            decoding_enabled: model.decoding_enabled,
            decoding: model.decoding.to_string(),
            rtsp2_web_enabled: model.rtsp2_web_enabled,
            rtsp2_web_type: model.rtsp2_web_type.to_string(),
            janus_enabled: model.janus_enabled,
            janus_audio_enabled: model.janus_audio_enabled,
            janus_profile_override: model.janus_profile_override,
            janus_use_rtsp_restream: model.janus_use_rtsp_restream,
            janus_rtsp_user: model.janus_rtsp_user,
            janus_rtsp_session_timeout: model.janus_rtsp_session_timeout,
            linked_monitors: model.linked_monitors,
            triggers: model.triggers,
            event_start_command: model.event_start_command,
            event_end_command: model.event_end_command,
            onvif_url: model.onvif_url,
            onvif_events_path: model.onvif_events_path,
            onvif_username: model.onvif_username,
            onvif_password: model.onvif_password,
            onvif_options: model.onvif_options,
            onvif_event_listener: model.onvif_event_listener,
            onvif_alarm_text: model.onvif_alarm_text,
            use_amcrest_api: model.use_amcrest_api,
            device: model.device,
            channel: model.channel,
            format: model.format,
            v4l_multi_buffer: model.v4l_multi_buffer,
            v4l_captures_per_frame: model.v4l_captures_per_frame,
            protocol: model.protocol,
            method: model.method,
            host: model.host,
            port: model.port,
            sub_path: model.sub_path,
            path: model.path,
            second_path: model.second_path,
            options: model.options,
            user: model.user,
            pass: model.pass,
            width: model.width,
            height: model.height,
            colours: model.colours,
            palette: model.palette,
            orientation: model.orientation.to_string(),
            deinterlacing: model.deinterlacing,
            decoder: model.decoder,
            decoder_hw_accel_name: model.decoder_hw_accel_name,
            decoder_hw_accel_device: model.decoder_hw_accel_device,
            save_jpe_gs: model.save_jpe_gs,
            video_writer: model.video_writer,
            output_codec: model.output_codec,
            encoder: model.encoder,
            output_container: model.output_container.map(|c| c.to_string()),
            encoder_parameters: model.encoder_parameters,
            record_audio: model.record_audio,
            recording_source: model.recording_source.to_string(),
            rtsp_describe: model.rtsp_describe,
            brightness: model.brightness,
            contrast: model.contrast,
            hue: model.hue,
            colour: model.colour,
            event_prefix: model.event_prefix,
            label_format: model.label_format,
            label_x: model.label_x,
            label_y: model.label_y,
            label_size: model.label_size,
            image_buffer_count: model.image_buffer_count,
            max_image_buffer_count: model.max_image_buffer_count,
            warmup_count: model.warmup_count,
            pre_event_count: model.pre_event_count,
            post_event_count: model.post_event_count,
            stream_replay_buffer: model.stream_replay_buffer,
            alarm_frame_count: model.alarm_frame_count,
            section_length: model.section_length,
            section_length_warn: model.section_length_warn,
            event_close_mode: model.event_close_mode.to_string(),
            min_section_length: model.min_section_length,
            frame_skip: model.frame_skip,
            motion_frame_skip: model.motion_frame_skip,
            analysis_fps_limit: model.analysis_fps_limit.map(|d| d.to_f64().unwrap_or(0.0)),
            analysis_update_delay: model.analysis_update_delay,
            max_fps: model.max_fps.map(|d| d.to_f64().unwrap_or(0.0)),
            alarm_max_fps: model.alarm_max_fps.map(|d| d.to_f64().unwrap_or(0.0)),
            fps_report_interval: model.fps_report_interval,
            ref_blend_perc: model.ref_blend_perc,
            alarm_ref_blend_perc: model.alarm_ref_blend_perc,
            controllable: model.controllable,
            control_id: model.control_id,
            control_device: model.control_device,
            control_address: model.control_address,
            auto_stop_timeout: model.auto_stop_timeout.map(|d| d.to_f64().unwrap_or(0.0)),
            track_motion: model.track_motion,
            track_delay: model.track_delay,
            return_location: model.return_location,
            return_delay: model.return_delay,
            modect_during_ptz: model.modect_during_ptz,
            default_rate: model.default_rate,
            default_scale: model.default_scale,
            default_codec: model.default_codec.to_string(),
            signal_check_points: model.signal_check_points,
            signal_check_colour: model.signal_check_colour,
            web_colour: model.web_colour,
            exif: model.exif,
            sequence: model.sequence,
            total_events: model.total_events,
            zone_count: model.zone_count,
            total_event_disk_space: model.total_event_disk_space,
            refresh: model.refresh,
            latitude: model.latitude.map(|d| d.to_f64().unwrap_or(0.0)),
            longitude: model.longitude.map(|d| d.to_f64().unwrap_or(0.0)),
            rtsp_server: model.rtsp_server,
            rtsp_stream_name: model.rtsp_stream_name,
            soap_wsa_compl: model.soap_wsa_compl,
            importance: model.importance.to_string(),
            mqtt_enabled: model.mqtt_enabled,
            mqtt_subscriptions: model.mqtt_subscriptions,
            startup_delay: model.startup_delay,
            analysing: model.analysing.to_string(),
            analysis_source: model.analysis_source.to_string(),
            analysis_image: model.analysis_image.to_string(),
            recording: model.recording.to_string(),
        }
    }
}